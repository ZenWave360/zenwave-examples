<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>io.github.zenwave360.examples</groupId>
		<artifactId>zenwave-examples</artifactId>
		<version>0.9.5-SNAPSHOT</version>
		<relativePath>../../pom.xml</relativePath>
	</parent>
	<artifactId>spring-boot-mongodb-elasticsearch-kafka-skeleton</artifactId>
	<name>${pom.groupId}:${pom.artifactId}</name>
	<description>ZenWave360 Example</description>

	<properties>
		<skipTests>true</skipTests>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-elasticsearch</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-mongodb</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-rest</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-stream-kafka</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-stream-schema</artifactId>
			<version>2.2.1.RELEASE</version>
		</dependency>
		<dependency>
			<groupId>org.mapstruct</groupId>
			<artifactId>mapstruct</artifactId>
			<version>${mapstruct.version}</version>
		</dependency>

		<dependency>
			<groupId>org.junit.platform</groupId>
			<artifactId>junit-platform-suite-engine</artifactId>
			<version>1.8.1</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-stream</artifactId>
			<scope>test</scope>
			<classifier>test-binder</classifier>
			<type>test-jar</type>
		</dependency>
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>io.rest-assured</groupId>
			<artifactId>rest-assured</artifactId>
			<version>5.3.0</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.hamcrest</groupId>
			<artifactId>hamcrest</artifactId>
			<version>2.2</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.testcontainers</groupId>
			<artifactId>elasticsearch</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.testcontainers</groupId>
			<artifactId>junit-jupiter</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.testcontainers</groupId>
			<artifactId>kafka</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.testcontainers</groupId>
			<artifactId>mongodb</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<defaultGoal>spring-boot:run</defaultGoal>
		<plugins>
			<plugin>
				<groupId>org.openapitools</groupId>
				<artifactId>openapi-generator-maven-plugin</artifactId>
				<version>5.4.0</version>
				<executions>
					<execution>
						<goals>
							<goal>generate</goal>
						</goals>
						<phase>generate-sources</phase>
						<configuration>
							<inputSpec>${project.basedir}/src/main/resources/model/openapi.yml</inputSpec>
							<generatorName>spring</generatorName>
							<apiPackage>io.zenwave360.example.adapters.web</apiPackage>
							<modelPackage>io.zenwave360.example.adapters.web.model</modelPackage>
							<modelNameSuffix>DTO</modelNameSuffix>
							<addCompileSourceRoot>true</addCompileSourceRoot>
							<supportingFilesToGenerate>
								ApiUtil.java
							</supportingFilesToGenerate>
							<configOptions>
								<documentationProvider>none</documentationProvider>
								<openApiNullable>false</openApiNullable>
								<useOptional>true</useOptional>
								<useTags>true</useTags>
								<interfaceOnly>true</interfaceOnly>
								<delegatePattern>false</delegatePattern>
							</configOptions>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>io.github.zenwave360.zenwave-code-generator</groupId>
				<artifactId>zenwave-code-generator-mojo</artifactId>
				<version>${zenwave.version}</version>
				<configuration>
					<skip>false</skip>
					<addCompileSourceRoot>true</addCompileSourceRoot>
				</configuration>
				<executions>
					<!-- Generate PRODUCER -->
					<execution>
						<id>generate-asyncapi-producer</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<generatorName>spring-cloud-streams3</generatorName>
							<inputSpec>${pom.basedir}/src/main/resources/model/asyncapi.yml</inputSpec>
							<configOptions>
								<role>provider</role>
								<style>imperative</style>
								<transactionalOutbox>mongodb</transactionalOutbox>
								<apiPackage>io.zenwave360.example.core.events.provider</apiPackage>
								<modelPackage>io.zenwave360.example.core.events.model</modelPackage>
							</configOptions>
						</configuration>
					</execution>
					<execution>
						<id>generate-asyncapi-producer-dtos</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<generatorName>jsonschema2pojo</generatorName>
							<inputSpec>${pom.basedir}/src/main/resources/model/asyncapi.yml</inputSpec>
							<configOptions>
								<modelPackage>io.zenwave360.example.core.events.model</modelPackage>
<!--								<jsonschema2pojo.includeTypeInfo>true</jsonschema2pojo.includeTypeInfo>-->
							</configOptions>
						</configuration>
					</execution>
					<!-- Generate CONSUMER -->
					<execution>
						<id>generate-asyncapi-consumer</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<skip>true</skip>
							<generatorName>spring-cloud-streams3</generatorName>
							<inputSpec>${pom.basedir}/src/main/resources/model/asyncapi.yml</inputSpec>
							<configOptions>
								<role>client</role>
								<style>imperative</style>
								<apiPackage>io.zenwave360.example.core.events.client</apiPackage>
								<modelPackage>io.zenwave360.example.core.events.model</modelPackage>
							</configOptions>
						</configuration>
					</execution>
				</executions>
				<dependencies>
					<dependency>
						<groupId>io.github.zenwave360.zenwave-code-generator.plugins</groupId>
						<artifactId>asyncapi-spring-cloud-streams3</artifactId>
						<version>${zenwave.version}</version>
					</dependency>
					<dependency>
						<groupId>io.github.zenwave360.zenwave-code-generator.plugins</groupId>
						<artifactId>asyncapi-jsonschema2pojo</artifactId>
						<version>${zenwave.version}</version>
					</dependency>
				</dependencies>
			</plugin>
		</plugins>
	</build>


</project>
